// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Efficient_Cor,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485tffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.663000,HLS_SYN_LAT=1464,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=14,HLS_SYN_FF=3028,HLS_SYN_LUT=2258}" *)

module Efficient_Cor (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Gol_a_address0,
        Gol_a_ce0,
        Gol_a_q0,
        Gol_b_address0,
        Gol_b_ce0,
        Gol_b_q0,
        Gor_a_address0,
        Gor_a_ce0,
        Gor_a_we0,
        Gor_a_d0,
        Gor_b_address0,
        Gor_b_ce0,
        Gor_b_we0,
        Gor_b_d0
);

parameter    ap_ST_fsm_state1 = 37'b1;
parameter    ap_ST_fsm_state2 = 37'b10;
parameter    ap_ST_fsm_state3 = 37'b100;
parameter    ap_ST_fsm_state4 = 37'b1000;
parameter    ap_ST_fsm_state5 = 37'b10000;
parameter    ap_ST_fsm_state6 = 37'b100000;
parameter    ap_ST_fsm_state7 = 37'b1000000;
parameter    ap_ST_fsm_state8 = 37'b10000000;
parameter    ap_ST_fsm_state9 = 37'b100000000;
parameter    ap_ST_fsm_state10 = 37'b1000000000;
parameter    ap_ST_fsm_state11 = 37'b10000000000;
parameter    ap_ST_fsm_state12 = 37'b100000000000;
parameter    ap_ST_fsm_state13 = 37'b1000000000000;
parameter    ap_ST_fsm_state14 = 37'b10000000000000;
parameter    ap_ST_fsm_state15 = 37'b100000000000000;
parameter    ap_ST_fsm_state16 = 37'b1000000000000000;
parameter    ap_ST_fsm_state17 = 37'b10000000000000000;
parameter    ap_ST_fsm_state18 = 37'b100000000000000000;
parameter    ap_ST_fsm_state19 = 37'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 37'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 37'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 37'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 37'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 37'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 37'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 37'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 37'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 37'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 37'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 37'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 37'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 37'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 37'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 37'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 37'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 37'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 37'b1000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv3_2 = 3'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] Gol_a_address0;
output   Gol_a_ce0;
input  [31:0] Gol_a_q0;
output  [2:0] Gol_b_address0;
output   Gol_b_ce0;
input  [31:0] Gol_b_q0;
output  [2:0] Gor_a_address0;
output   Gor_a_ce0;
output   Gor_a_we0;
output  [31:0] Gor_a_d0;
output  [2:0] Gor_b_address0;
output   Gor_b_ce0;
output   Gor_b_we0;
output  [31:0] Gor_b_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] Gol_a_address0;
reg Gol_a_ce0;
reg[2:0] Gol_b_address0;
reg Gol_b_ce0;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [31:0] dff_1D;
reg   [2:0] buf_cor_8D_a_address0;
reg    buf_cor_8D_a_ce0;
reg    buf_cor_8D_a_we0;
wire   [31:0] buf_cor_8D_a_q0;
reg   [2:0] buf_cor_8D_a_address1;
reg    buf_cor_8D_a_ce1;
wire   [31:0] buf_cor_8D_a_q1;
reg   [31:0] dff_2D_0;
reg   [31:0] dff_2D_1;
reg   [2:0] buf_cor_2D_a_address0;
reg    buf_cor_2D_a_ce0;
reg    buf_cor_2D_a_we0;
wire   [31:0] buf_cor_2D_a_q0;
reg   [2:0] buf_cor_2D_a_address1;
reg    buf_cor_2D_a_ce1;
reg    buf_cor_2D_a_we1;
wire   [31:0] buf_cor_2D_a_q1;
reg   [2:0] buf_cor_4D_a_address0;
reg    buf_cor_4D_a_ce0;
reg    buf_cor_4D_a_we0;
wire   [31:0] buf_cor_4D_a_q0;
reg   [2:0] buf_cor_16D_a_address0;
reg    buf_cor_16D_a_ce0;
reg    buf_cor_16D_a_we0;
wire   [31:0] buf_cor_16D_a_q0;
reg   [2:0] buf_cor_32D_a_address0;
reg    buf_cor_32D_a_ce0;
reg    buf_cor_32D_a_we0;
wire   [31:0] buf_cor_32D_a_q0;
reg   [31:0] reg_308;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state10;
wire   [31:0] grp_fu_300_p2;
reg   [31:0] reg_313;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state22;
wire   [0:0] ap_CS_fsm_state29;
reg   [31:0] reg_319;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state25;
reg   [31:0] reg_325;
wire   [2:0] indvarinc_fu_336_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_fu_342_p2;
wire   [0:0] ap_CS_fsm_state4;
wire   [2:0] i_fu_370_p2;
reg   [2:0] i_reg_457;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] exitcond1_i_fu_364_p2;
wire   [31:0] i_cast_fu_376_p1;
reg   [31:0] i_cast_reg_467;
reg   [31:0] Gol_b_load_1_reg_477;
wire   [0:0] ap_CS_fsm_state19;
wire   [31:0] grp_fu_304_p2;
reg   [31:0] tmp_i5_reg_492;
wire   [2:0] i_4_fu_414_p2;
reg   [2:0] i_4_reg_500;
wire   [0:0] ap_CS_fsm_state24;
wire   [0:0] exitcond1_i7_fu_408_p2;
wire   [31:0] sum_i_cast_fu_426_p1;
reg   [31:0] sum_i_cast_reg_510;
reg   [2:0] buf_cor_1D_a_address0;
reg    buf_cor_1D_a_ce0;
reg    buf_cor_1D_a_we0;
reg   [31:0] buf_cor_1D_a_d0;
wire   [31:0] buf_cor_1D_a_q0;
wire    grp_Stage_8_8D_fu_250_ap_start;
wire    grp_Stage_8_8D_fu_250_ap_done;
wire    grp_Stage_8_8D_fu_250_ap_idle;
wire    grp_Stage_8_8D_fu_250_ap_ready;
wire   [2:0] grp_Stage_8_8D_fu_250_buf_a_address0;
wire    grp_Stage_8_8D_fu_250_buf_a_ce0;
reg   [31:0] grp_Stage_8_8D_fu_250_buf_a_q0;
wire   [2:0] grp_Stage_8_8D_fu_250_buf_cor_a_address0;
wire    grp_Stage_8_8D_fu_250_buf_cor_a_ce0;
wire    grp_Stage_8_8D_fu_250_buf_cor_a_we0;
wire   [31:0] grp_Stage_8_8D_fu_250_buf_cor_a_d0;
wire   [2:0] grp_Stage_8_8D_fu_250_buf_cor_b_address0;
wire    grp_Stage_8_8D_fu_250_buf_cor_b_ce0;
wire    grp_Stage_8_8D_fu_250_buf_cor_b_we0;
wire   [31:0] grp_Stage_8_8D_fu_250_buf_cor_b_d0;
wire    grp_Stage_8_4D_fu_264_ap_start;
wire    grp_Stage_8_4D_fu_264_ap_done;
wire    grp_Stage_8_4D_fu_264_ap_idle;
wire    grp_Stage_8_4D_fu_264_ap_ready;
wire   [2:0] grp_Stage_8_4D_fu_264_buf_a_address0;
wire    grp_Stage_8_4D_fu_264_buf_a_ce0;
wire   [2:0] grp_Stage_8_4D_fu_264_buf_a_address1;
wire    grp_Stage_8_4D_fu_264_buf_a_ce1;
wire   [2:0] grp_Stage_8_4D_fu_264_buf_cor_4D_a_address0;
wire    grp_Stage_8_4D_fu_264_buf_cor_4D_a_ce0;
wire    grp_Stage_8_4D_fu_264_buf_cor_4D_a_we0;
wire   [31:0] grp_Stage_8_4D_fu_264_buf_cor_4D_a_d0;
wire    grp_Stage_8_32D_fu_280_ap_start;
wire    grp_Stage_8_32D_fu_280_ap_done;
wire    grp_Stage_8_32D_fu_280_ap_idle;
wire    grp_Stage_8_32D_fu_280_ap_ready;
wire   [2:0] grp_Stage_8_32D_fu_280_buf_a_address0;
wire    grp_Stage_8_32D_fu_280_buf_a_ce0;
wire   [2:0] grp_Stage_8_32D_fu_280_buf_cor_32D_a_address0;
wire    grp_Stage_8_32D_fu_280_buf_cor_32D_a_ce0;
wire    grp_Stage_8_32D_fu_280_buf_cor_32D_a_we0;
wire   [31:0] grp_Stage_8_32D_fu_280_buf_cor_32D_a_d0;
wire    grp_Stage_8_16D_fu_290_ap_start;
wire    grp_Stage_8_16D_fu_290_ap_done;
wire    grp_Stage_8_16D_fu_290_ap_idle;
wire    grp_Stage_8_16D_fu_290_ap_ready;
wire   [2:0] grp_Stage_8_16D_fu_290_buf_a_address0;
wire    grp_Stage_8_16D_fu_290_buf_a_ce0;
wire   [2:0] grp_Stage_8_16D_fu_290_buf_cor_16D_a_address0;
wire    grp_Stage_8_16D_fu_290_buf_cor_16D_a_ce0;
wire    grp_Stage_8_16D_fu_290_buf_cor_16D_a_we0;
wire   [31:0] grp_Stage_8_16D_fu_290_buf_cor_16D_a_d0;
reg   [2:0] invdar_reg_217;
reg   [2:0] i_i_reg_228;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state15;
reg   [2:0] i_i6_reg_239;
wire   [0:0] ap_CS_fsm_state23;
wire   [0:0] ap_CS_fsm_state30;
reg    ap_reg_grp_Stage_8_8D_fu_250_ap_start;
wire   [0:0] ap_CS_fsm_state36;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state37;
reg    ap_reg_grp_Stage_8_4D_fu_264_ap_start;
wire   [0:0] ap_CS_fsm_state31;
reg    ap_reg_grp_Stage_8_32D_fu_280_ap_start;
wire   [0:0] ap_CS_fsm_state34;
wire   [0:0] ap_CS_fsm_state35;
reg    ap_reg_grp_Stage_8_16D_fu_290_ap_start;
wire   [0:0] ap_CS_fsm_state32;
wire   [0:0] ap_CS_fsm_state33;
wire   [31:0] invdar_cast_fu_331_p1;
wire   [31:0] i_i_cast2_fu_359_p1;
wire   [31:0] i_i6_cast1_fu_403_p1;
wire   [0:0] ap_CS_fsm_state17;
reg   [31:0] grp_fu_300_p0;
reg   [31:0] grp_fu_300_p1;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state26;
wire   [2:0] sum_i_fu_420_p2;
reg   [36:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'b1;
#0 dff_1D = 32'b00000000000000000000000000000000;
#0 dff_2D_0 = 32'b00000000000000000000000000000000;
#0 dff_2D_1 = 32'b00000000000000000000000000000000;
#0 ap_reg_grp_Stage_8_8D_fu_250_ap_start = 1'b0;
#0 ap_reg_grp_Stage_8_4D_fu_264_ap_start = 1'b0;
#0 ap_reg_grp_Stage_8_32D_fu_280_ap_start = 1'b0;
#0 ap_reg_grp_Stage_8_16D_fu_290_ap_start = 1'b0;
end

Efficient_Cor_bufeOg #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
buf_cor_8D_a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_cor_8D_a_address0),
    .ce0(buf_cor_8D_a_ce0),
    .we0(buf_cor_8D_a_we0),
    .d0(grp_Stage_8_8D_fu_250_buf_cor_a_d0),
    .q0(buf_cor_8D_a_q0),
    .address1(buf_cor_8D_a_address1),
    .ce1(buf_cor_8D_a_ce1),
    .q1(buf_cor_8D_a_q1)
);

Efficient_Cor_buffYi #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
buf_cor_8D_b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_Stage_8_8D_fu_250_buf_cor_b_address0),
    .ce0(grp_Stage_8_8D_fu_250_buf_cor_b_ce0),
    .we0(grp_Stage_8_8D_fu_250_buf_cor_b_we0),
    .d0(grp_Stage_8_8D_fu_250_buf_cor_b_d0)
);

Efficient_Cor_bufg8j #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
buf_cor_2D_a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_cor_2D_a_address0),
    .ce0(buf_cor_2D_a_ce0),
    .we0(buf_cor_2D_a_we0),
    .d0(reg_313),
    .q0(buf_cor_2D_a_q0),
    .address1(buf_cor_2D_a_address1),
    .ce1(buf_cor_2D_a_ce1),
    .we1(buf_cor_2D_a_we1),
    .d1(tmp_i5_reg_492),
    .q1(buf_cor_2D_a_q1)
);

Efficient_Cor_bufhbi #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
buf_cor_4D_a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_cor_4D_a_address0),
    .ce0(buf_cor_4D_a_ce0),
    .we0(buf_cor_4D_a_we0),
    .d0(grp_Stage_8_4D_fu_264_buf_cor_4D_a_d0),
    .q0(buf_cor_4D_a_q0)
);

Efficient_Cor_bufhbi #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
buf_cor_16D_a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_cor_16D_a_address0),
    .ce0(buf_cor_16D_a_ce0),
    .we0(buf_cor_16D_a_we0),
    .d0(grp_Stage_8_16D_fu_290_buf_cor_16D_a_d0),
    .q0(buf_cor_16D_a_q0)
);

Efficient_Cor_bufhbi #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
buf_cor_32D_a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_cor_32D_a_address0),
    .ce0(buf_cor_32D_a_ce0),
    .we0(buf_cor_32D_a_we0),
    .d0(grp_Stage_8_32D_fu_280_buf_cor_32D_a_d0),
    .q0(buf_cor_32D_a_q0)
);

Efficient_Cor_bufkbM #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
buf_cor_1D_a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_cor_1D_a_address0),
    .ce0(buf_cor_1D_a_ce0),
    .we0(buf_cor_1D_a_we0),
    .d0(buf_cor_1D_a_d0),
    .q0(buf_cor_1D_a_q0)
);

Stage_8_8D grp_Stage_8_8D_fu_250(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Stage_8_8D_fu_250_ap_start),
    .ap_done(grp_Stage_8_8D_fu_250_ap_done),
    .ap_idle(grp_Stage_8_8D_fu_250_ap_idle),
    .ap_ready(grp_Stage_8_8D_fu_250_ap_ready),
    .buf_a_address0(grp_Stage_8_8D_fu_250_buf_a_address0),
    .buf_a_ce0(grp_Stage_8_8D_fu_250_buf_a_ce0),
    .buf_a_q0(grp_Stage_8_8D_fu_250_buf_a_q0),
    .buf_cor_a_address0(grp_Stage_8_8D_fu_250_buf_cor_a_address0),
    .buf_cor_a_ce0(grp_Stage_8_8D_fu_250_buf_cor_a_ce0),
    .buf_cor_a_we0(grp_Stage_8_8D_fu_250_buf_cor_a_we0),
    .buf_cor_a_d0(grp_Stage_8_8D_fu_250_buf_cor_a_d0),
    .buf_cor_b_address0(grp_Stage_8_8D_fu_250_buf_cor_b_address0),
    .buf_cor_b_ce0(grp_Stage_8_8D_fu_250_buf_cor_b_ce0),
    .buf_cor_b_we0(grp_Stage_8_8D_fu_250_buf_cor_b_we0),
    .buf_cor_b_d0(grp_Stage_8_8D_fu_250_buf_cor_b_d0)
);

Stage_8_4D grp_Stage_8_4D_fu_264(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Stage_8_4D_fu_264_ap_start),
    .ap_done(grp_Stage_8_4D_fu_264_ap_done),
    .ap_idle(grp_Stage_8_4D_fu_264_ap_idle),
    .ap_ready(grp_Stage_8_4D_fu_264_ap_ready),
    .buf_a_address0(grp_Stage_8_4D_fu_264_buf_a_address0),
    .buf_a_ce0(grp_Stage_8_4D_fu_264_buf_a_ce0),
    .buf_a_q0(buf_cor_2D_a_q0),
    .buf_a_address1(grp_Stage_8_4D_fu_264_buf_a_address1),
    .buf_a_ce1(grp_Stage_8_4D_fu_264_buf_a_ce1),
    .buf_a_q1(buf_cor_2D_a_q1),
    .buf_cor_4D_a_address0(grp_Stage_8_4D_fu_264_buf_cor_4D_a_address0),
    .buf_cor_4D_a_ce0(grp_Stage_8_4D_fu_264_buf_cor_4D_a_ce0),
    .buf_cor_4D_a_we0(grp_Stage_8_4D_fu_264_buf_cor_4D_a_we0),
    .buf_cor_4D_a_d0(grp_Stage_8_4D_fu_264_buf_cor_4D_a_d0)
);

Stage_8_32D grp_Stage_8_32D_fu_280(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Stage_8_32D_fu_280_ap_start),
    .ap_done(grp_Stage_8_32D_fu_280_ap_done),
    .ap_idle(grp_Stage_8_32D_fu_280_ap_idle),
    .ap_ready(grp_Stage_8_32D_fu_280_ap_ready),
    .buf_a_address0(grp_Stage_8_32D_fu_280_buf_a_address0),
    .buf_a_ce0(grp_Stage_8_32D_fu_280_buf_a_ce0),
    .buf_a_q0(buf_cor_16D_a_q0),
    .buf_cor_32D_a_address0(grp_Stage_8_32D_fu_280_buf_cor_32D_a_address0),
    .buf_cor_32D_a_ce0(grp_Stage_8_32D_fu_280_buf_cor_32D_a_ce0),
    .buf_cor_32D_a_we0(grp_Stage_8_32D_fu_280_buf_cor_32D_a_we0),
    .buf_cor_32D_a_d0(grp_Stage_8_32D_fu_280_buf_cor_32D_a_d0)
);

Stage_8_16D grp_Stage_8_16D_fu_290(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Stage_8_16D_fu_290_ap_start),
    .ap_done(grp_Stage_8_16D_fu_290_ap_done),
    .ap_idle(grp_Stage_8_16D_fu_290_ap_idle),
    .ap_ready(grp_Stage_8_16D_fu_290_ap_ready),
    .buf_a_address0(grp_Stage_8_16D_fu_290_buf_a_address0),
    .buf_a_ce0(grp_Stage_8_16D_fu_290_buf_a_ce0),
    .buf_a_q0(buf_cor_4D_a_q0),
    .buf_cor_16D_a_address0(grp_Stage_8_16D_fu_290_buf_cor_16D_a_address0),
    .buf_cor_16D_a_ce0(grp_Stage_8_16D_fu_290_buf_cor_16D_a_ce0),
    .buf_cor_16D_a_we0(grp_Stage_8_16D_fu_290_buf_cor_16D_a_we0),
    .buf_cor_16D_a_d0(grp_Stage_8_16D_fu_290_buf_cor_16D_a_d0)
);

Efficient_Cor_fsubkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Efficient_Cor_fsubkb_x_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_300_p0),
    .din1(grp_fu_300_p1),
    .ce(1'b1),
    .dout(grp_fu_300_p2)
);

Efficient_Cor_fsubkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Efficient_Cor_fsubkb_x_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dff_2D_1),
    .din1(reg_325),
    .ce(1'b1),
    .dout(grp_fu_304_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_Stage_8_16D_fu_290_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_reg_grp_Stage_8_16D_fu_290_ap_start <= 1'b1;
        end else if ((1'b1 == grp_Stage_8_16D_fu_290_ap_ready)) begin
            ap_reg_grp_Stage_8_16D_fu_290_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_Stage_8_32D_fu_280_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state34)) begin
            ap_reg_grp_Stage_8_32D_fu_280_ap_start <= 1'b1;
        end else if ((1'b1 == grp_Stage_8_32D_fu_280_ap_ready)) begin
            ap_reg_grp_Stage_8_32D_fu_280_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_Stage_8_4D_fu_264_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & ~(1'b0 == exitcond1_i7_fu_408_p2))) begin
            ap_reg_grp_Stage_8_4D_fu_264_ap_start <= 1'b1;
        end else if ((1'b1 == grp_Stage_8_4D_fu_264_ap_ready)) begin
            ap_reg_grp_Stage_8_4D_fu_264_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_Stage_8_8D_fu_250_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == exitcond1_i_fu_364_p2)) | (1'b1 == ap_CS_fsm_state36))) begin
            ap_reg_grp_Stage_8_8D_fu_250_ap_start <= 1'b1;
        end else if ((1'b1 == grp_Stage_8_8D_fu_250_ap_ready)) begin
            ap_reg_grp_Stage_8_8D_fu_250_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_i6_reg_239 <= i_4_reg_500;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        i_i6_reg_239 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_i_reg_228 <= i_reg_457;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_i_reg_228 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_342_p2 == 1'b0))) begin
        invdar_reg_217 <= indvarinc_fu_336_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        invdar_reg_217 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Gol_b_load_1_reg_477 <= Gol_b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dff_1D <= Gol_b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        dff_2D_0 <= buf_cor_8D_a_q0;
        dff_2D_1 <= buf_cor_8D_a_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_4_reg_500 <= i_4_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond1_i_fu_364_p2))) begin
        i_cast_reg_467[2 : 0] <= i_cast_fu_376_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_457 <= i_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_308 <= Gol_a_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state29))) begin
        reg_313 <= grp_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_319 <= buf_cor_8D_a_q0;
        reg_325 <= buf_cor_8D_a_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == exitcond1_i7_fu_408_p2))) begin
        sum_i_cast_reg_510[2 : 0] <= sum_i_cast_fu_426_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_i5_reg_492 <= grp_fu_304_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Gol_a_address0 = i_cast_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Gol_a_address0 = ap_const_lv32_0;
    end else begin
        Gol_a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9))) begin
        Gol_a_ce0 = 1'b1;
    end else begin
        Gol_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Gol_b_address0 = i_i_cast2_fu_359_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        Gol_b_address0 = ap_const_lv32_7;
    end else begin
        Gol_b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        Gol_b_ce0 = 1'b1;
    end else begin
        Gol_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & ~(1'b0 == grp_Stage_8_8D_fu_250_ap_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & ~(1'b0 == grp_Stage_8_8D_fu_250_ap_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        buf_cor_16D_a_address0 = grp_Stage_8_16D_fu_290_buf_cor_16D_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        buf_cor_16D_a_address0 = grp_Stage_8_32D_fu_280_buf_a_address0;
    end else begin
        buf_cor_16D_a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        buf_cor_16D_a_ce0 = grp_Stage_8_16D_fu_290_buf_cor_16D_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        buf_cor_16D_a_ce0 = grp_Stage_8_32D_fu_280_buf_a_ce0;
    end else begin
        buf_cor_16D_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        buf_cor_16D_a_we0 = grp_Stage_8_16D_fu_290_buf_cor_16D_a_we0;
    end else begin
        buf_cor_16D_a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        buf_cor_1D_a_address0 = i_cast_reg_467;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_cor_1D_a_address0 = ap_const_lv32_0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_cor_1D_a_address0 = invdar_cast_fu_331_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_cor_1D_a_address0 = grp_Stage_8_8D_fu_250_buf_a_address0;
    end else begin
        buf_cor_1D_a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15))) begin
        buf_cor_1D_a_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_cor_1D_a_ce0 = grp_Stage_8_8D_fu_250_buf_a_ce0;
    end else begin
        buf_cor_1D_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15))) begin
        buf_cor_1D_a_d0 = reg_313;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_cor_1D_a_d0 = ap_const_lv32_0;
    end else begin
        buf_cor_1D_a_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15))) begin
        buf_cor_1D_a_we0 = 1'b1;
    end else begin
        buf_cor_1D_a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        buf_cor_2D_a_address0 = sum_i_cast_reg_510;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_cor_2D_a_address0 = ap_const_lv3_0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_cor_2D_a_address0 = grp_Stage_8_4D_fu_264_buf_a_address0;
    end else begin
        buf_cor_2D_a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_cor_2D_a_address1 = ap_const_lv3_1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_cor_2D_a_address1 = grp_Stage_8_4D_fu_264_buf_a_address1;
    end else begin
        buf_cor_2D_a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state30))) begin
        buf_cor_2D_a_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_cor_2D_a_ce0 = grp_Stage_8_4D_fu_264_buf_a_ce0;
    end else begin
        buf_cor_2D_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_cor_2D_a_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_cor_2D_a_ce1 = grp_Stage_8_4D_fu_264_buf_a_ce1;
    end else begin
        buf_cor_2D_a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state30))) begin
        buf_cor_2D_a_we0 = 1'b1;
    end else begin
        buf_cor_2D_a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_cor_2D_a_we1 = 1'b1;
    end else begin
        buf_cor_2D_a_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        buf_cor_32D_a_address0 = grp_Stage_8_32D_fu_280_buf_cor_32D_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        buf_cor_32D_a_address0 = grp_Stage_8_8D_fu_250_buf_a_address0;
    end else begin
        buf_cor_32D_a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        buf_cor_32D_a_ce0 = grp_Stage_8_32D_fu_280_buf_cor_32D_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        buf_cor_32D_a_ce0 = grp_Stage_8_8D_fu_250_buf_a_ce0;
    end else begin
        buf_cor_32D_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        buf_cor_32D_a_we0 = grp_Stage_8_32D_fu_280_buf_cor_32D_a_we0;
    end else begin
        buf_cor_32D_a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        buf_cor_4D_a_address0 = grp_Stage_8_16D_fu_290_buf_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_cor_4D_a_address0 = grp_Stage_8_4D_fu_264_buf_cor_4D_a_address0;
    end else begin
        buf_cor_4D_a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        buf_cor_4D_a_ce0 = grp_Stage_8_16D_fu_290_buf_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_cor_4D_a_ce0 = grp_Stage_8_4D_fu_264_buf_cor_4D_a_ce0;
    end else begin
        buf_cor_4D_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_cor_4D_a_we0 = grp_Stage_8_4D_fu_264_buf_cor_4D_a_we0;
    end else begin
        buf_cor_4D_a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_cor_8D_a_address0 = i_i6_cast1_fu_403_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buf_cor_8D_a_address0 = ap_const_lv3_6;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf_cor_8D_a_address0 = ap_const_lv3_0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_cor_8D_a_address0 = grp_Stage_8_8D_fu_250_buf_cor_a_address0;
    end else begin
        buf_cor_8D_a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_cor_8D_a_address1 = sum_i_cast_fu_426_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buf_cor_8D_a_address1 = ap_const_lv3_7;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf_cor_8D_a_address1 = ap_const_lv3_1;
    end else begin
        buf_cor_8D_a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state17))) begin
        buf_cor_8D_a_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_cor_8D_a_ce0 = grp_Stage_8_8D_fu_250_buf_cor_a_ce0;
    end else begin
        buf_cor_8D_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state17))) begin
        buf_cor_8D_a_ce1 = 1'b1;
    end else begin
        buf_cor_8D_a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_cor_8D_a_we0 = grp_Stage_8_8D_fu_250_buf_cor_a_we0;
    end else begin
        buf_cor_8D_a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_Stage_8_8D_fu_250_buf_a_q0 = buf_cor_32D_a_q0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_Stage_8_8D_fu_250_buf_a_q0 = buf_cor_1D_a_q0;
    end else begin
        grp_Stage_8_8D_fu_250_buf_a_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_300_p0 = reg_319;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_300_p0 = dff_2D_0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_300_p0 = Gol_b_load_1_reg_477;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_300_p0 = dff_1D;
    end else begin
        grp_fu_300_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_300_p1 = reg_325;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_300_p1 = reg_319;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_300_p1 = reg_308;
    end else begin
        grp_fu_300_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(tmp_fu_342_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (~(1'b0 == exitcond1_i_fu_364_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state16 : begin
            if (~(1'b0 == grp_Stage_8_8D_fu_250_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (~(1'b0 == exitcond1_i7_fu_408_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state31 : begin
            if (~(1'b0 == grp_Stage_8_4D_fu_264_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (~(1'b0 == grp_Stage_8_16D_fu_290_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (~(1'b0 == grp_Stage_8_32D_fu_280_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (~(1'b0 == grp_Stage_8_8D_fu_250_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Gor_a_address0 = grp_Stage_8_8D_fu_250_buf_cor_a_address0;

assign Gor_a_ce0 = grp_Stage_8_8D_fu_250_buf_cor_a_ce0;

assign Gor_a_d0 = grp_Stage_8_8D_fu_250_buf_cor_a_d0;

assign Gor_a_we0 = grp_Stage_8_8D_fu_250_buf_cor_a_we0;

assign Gor_b_address0 = grp_Stage_8_8D_fu_250_buf_cor_b_address0;

assign Gor_b_ce0 = grp_Stage_8_8D_fu_250_buf_cor_b_ce0;

assign Gor_b_d0 = grp_Stage_8_8D_fu_250_buf_cor_b_d0;

assign Gor_b_we0 = grp_Stage_8_8D_fu_250_buf_cor_b_we0;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state35 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_state36 = ap_CS_fsm[ap_const_lv32_23];

assign ap_CS_fsm_state37 = ap_CS_fsm[ap_const_lv32_24];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign exitcond1_i7_fu_408_p2 = ((i_i6_reg_239 == ap_const_lv3_6) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_364_p2 = ((i_i_reg_228 == ap_const_lv3_7) ? 1'b1 : 1'b0);

assign grp_Stage_8_16D_fu_290_ap_start = ap_reg_grp_Stage_8_16D_fu_290_ap_start;

assign grp_Stage_8_32D_fu_280_ap_start = ap_reg_grp_Stage_8_32D_fu_280_ap_start;

assign grp_Stage_8_4D_fu_264_ap_start = ap_reg_grp_Stage_8_4D_fu_264_ap_start;

assign grp_Stage_8_8D_fu_250_ap_start = ap_reg_grp_Stage_8_8D_fu_250_ap_start;

assign i_4_fu_414_p2 = (i_i6_reg_239 + ap_const_lv3_1);

assign i_cast_fu_376_p1 = i_fu_370_p2;

assign i_fu_370_p2 = (i_i_reg_228 + ap_const_lv3_1);

assign i_i6_cast1_fu_403_p1 = i_i6_reg_239;

assign i_i_cast2_fu_359_p1 = i_i_reg_228;

assign indvarinc_fu_336_p2 = (invdar_reg_217 + ap_const_lv3_1);

assign invdar_cast_fu_331_p1 = invdar_reg_217;

assign sum_i_cast_fu_426_p1 = sum_i_fu_420_p2;

assign sum_i_fu_420_p2 = (i_i6_reg_239 + ap_const_lv3_2);

assign tmp_fu_342_p2 = ((invdar_reg_217 == ap_const_lv3_7) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_cast_reg_467[31:3] <= 29'b00000000000000000000000000000;
    sum_i_cast_reg_510[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //Efficient_Cor
