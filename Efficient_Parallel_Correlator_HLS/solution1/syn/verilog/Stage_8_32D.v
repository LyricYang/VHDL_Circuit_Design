// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Stage_8_32D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_a_address0,
        buf_a_ce0,
        buf_a_q0,
        buf_cor_32D_a_address0,
        buf_cor_32D_a_ce0,
        buf_cor_32D_a_we0,
        buf_cor_32D_a_d0
);

parameter    ap_ST_fsm_state1 = 10'b1;
parameter    ap_ST_fsm_state2 = 10'b10;
parameter    ap_ST_fsm_state3 = 10'b100;
parameter    ap_ST_fsm_state4 = 10'b1000;
parameter    ap_ST_fsm_state5 = 10'b10000;
parameter    ap_ST_fsm_state6 = 10'b100000;
parameter    ap_ST_fsm_state7 = 10'b1000000;
parameter    ap_ST_fsm_state8 = 10'b10000000;
parameter    ap_ST_fsm_state9 = 10'b100000000;
parameter    ap_ST_fsm_state10 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv6_1F = 6'b11111;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv6_3F = 6'b111111;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv9_1F = 9'b11111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv6_0 = 6'b000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] buf_a_address0;
output   buf_a_ce0;
input  [31:0] buf_a_q0;
output  [2:0] buf_cor_32D_a_address0;
output   buf_cor_32D_a_ce0;
output   buf_cor_32D_a_we0;
output  [31:0] buf_cor_32D_a_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buf_a_ce0;
reg buf_cor_32D_a_ce0;
reg buf_cor_32D_a_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [7:0] dff_32D_address0;
reg    dff_32D_ce0;
reg    dff_32D_we0;
reg   [31:0] dff_32D_d0;
wire   [31:0] dff_32D_q0;
wire   [31:0] i_cast1_fu_143_p1;
reg   [31:0] i_cast1_reg_234;
wire   [0:0] ap_CS_fsm_state2;
wire   [9:0] tmp_13_cast_fu_161_p1;
reg   [9:0] tmp_13_cast_reg_239;
reg   [7:0] dff_32D_addr_1_reg_250;
wire   [3:0] i_3_fu_186_p2;
reg   [3:0] i_3_reg_258;
wire   [0:0] exitcond1_fu_180_p2;
reg   [31:0] dff_32D_load_reg_268;
wire   [0:0] ap_CS_fsm_state3;
reg   [31:0] buf_b_load_reg_273;
wire   [31:0] grp_fu_132_p2;
reg   [31:0] tmp_reg_279;
wire   [0:0] ap_CS_fsm_state7;
reg   [7:0] dff_32D_addr_3_reg_284;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] tmp_1_fu_214_p2;
reg   [0:0] tmp_1_reg_292;
wire   [0:0] tmp_16_fu_206_p3;
wire   [5:0] grp_fu_136_p2;
wire   [0:0] ap_CS_fsm_state10;
reg   [3:0] i_reg_109;
wire   [5:0] k_phi_fu_124_p4;
reg   [5:0] k_reg_120;
wire   [0:0] ap_CS_fsm_state8;
wire   [31:0] tmp_14_fu_171_p3;
wire   [31:0] tmp_12_fu_156_p1;
wire  signed [31:0] tmp_16_cast_fu_201_p1;
wire   [31:0] tmp_17_cast_fu_229_p1;
wire   [0:0] ap_CS_fsm_state4;
reg   [5:0] grp_fu_136_p0;
wire   [8:0] tmp_s_fu_148_p3;
wire   [8:0] tmp_13_fu_165_p2;
wire  signed [9:0] k_cast_cast_fu_192_p1;
wire   [9:0] tmp_15_fu_196_p2;
wire   [9:0] tmp_2_cast_cast_fu_220_p1;
wire   [9:0] tmp_17_fu_224_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'b1;
end

Stage_8_32D_dff_32D #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
dff_32D_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dff_32D_address0),
    .ce0(dff_32D_ce0),
    .we0(dff_32D_we0),
    .d0(dff_32D_d0),
    .q0(dff_32D_q0)
);

Efficient_Cor_fsubkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Efficient_Cor_fsubkb_x_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dff_32D_load_reg_268),
    .din1(buf_b_load_reg_273),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_109 <= ap_const_lv4_0;
    end else if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_16_fu_206_p3))) begin
        i_reg_109 <= i_3_reg_258;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_reg_120 <= grp_fu_136_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k_reg_120 <= ap_const_lv6_1F;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_b_load_reg_273 <= buf_a_q0;
        dff_32D_load_reg_268 <= dff_32D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dff_32D_addr_1_reg_250[7 : 5] <= tmp_12_fu_156_p1[7 : 5];
        i_3_reg_258 <= i_3_fu_186_p2;
        i_cast1_reg_234[3 : 0] <= i_cast1_fu_143_p1[3 : 0];
        tmp_13_cast_reg_239[8 : 5] <= tmp_13_cast_fu_161_p1[8 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        dff_32D_addr_3_reg_284 <= tmp_16_cast_fu_201_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_16_fu_206_p3))) begin
        tmp_1_reg_292 <= tmp_1_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_reg_279 <= grp_fu_132_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & ~(exitcond1_fu_180_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond1_fu_180_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_a_ce0 = 1'b1;
    end else begin
        buf_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_cor_32D_a_ce0 = 1'b1;
    end else begin
        buf_cor_32D_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_cor_32D_a_we0 = 1'b1;
    end else begin
        buf_cor_32D_a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dff_32D_address0 = dff_32D_addr_3_reg_284;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_16_fu_206_p3) & ~(1'b0 == tmp_1_fu_214_p2))) begin
        dff_32D_address0 = dff_32D_addr_1_reg_250;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_16_fu_206_p3) & (1'b0 == tmp_1_fu_214_p2))) begin
        dff_32D_address0 = tmp_17_cast_fu_229_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dff_32D_address0 = tmp_14_fu_171_p3;
    end else begin
        dff_32D_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_16_fu_206_p3) & (1'b0 == tmp_1_fu_214_p2)) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_16_fu_206_p3) & ~(1'b0 == tmp_1_fu_214_p2)))) begin
        dff_32D_ce0 = 1'b1;
    end else begin
        dff_32D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dff_32D_d0 = dff_32D_q0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_16_fu_206_p3) & ~(1'b0 == tmp_1_fu_214_p2))) begin
        dff_32D_d0 = buf_b_load_reg_273;
    end else begin
        dff_32D_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_16_fu_206_p3) & ~(1'b0 == tmp_1_fu_214_p2)) | ((1'b1 == ap_CS_fsm_state10) & (1'b0 == tmp_1_reg_292)))) begin
        dff_32D_we0 = 1'b1;
    end else begin
        dff_32D_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_136_p0 = k_reg_120;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_136_p0 = k_phi_fu_124_p4;
    end else begin
        grp_fu_136_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond1_fu_180_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (~(1'b0 == tmp_16_fu_206_p3)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign buf_a_address0 = i_cast1_fu_143_p1;

assign buf_cor_32D_a_address0 = i_cast1_reg_234;

assign buf_cor_32D_a_d0 = tmp_reg_279;

assign exitcond1_fu_180_p2 = ((i_reg_109 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign grp_fu_136_p2 = ($signed(grp_fu_136_p0) + $signed(ap_const_lv6_3F));

assign i_3_fu_186_p2 = (i_reg_109 + ap_const_lv4_1);

assign i_cast1_fu_143_p1 = i_reg_109;

assign k_cast_cast_fu_192_p1 = $signed(k_reg_120);

assign k_phi_fu_124_p4 = k_reg_120;

assign tmp_12_fu_156_p1 = tmp_s_fu_148_p3;

assign tmp_13_cast_fu_161_p1 = tmp_s_fu_148_p3;

assign tmp_13_fu_165_p2 = (tmp_s_fu_148_p3 | ap_const_lv9_1F);

assign tmp_14_fu_171_p3 = {{ap_const_lv23_0}, {tmp_13_fu_165_p2}};

assign tmp_15_fu_196_p2 = ($signed(tmp_13_cast_reg_239) + $signed(k_cast_cast_fu_192_p1));

assign tmp_16_cast_fu_201_p1 = $signed(tmp_15_fu_196_p2);

assign tmp_16_fu_206_p3 = k_reg_120[ap_const_lv32_5];

assign tmp_17_cast_fu_229_p1 = tmp_17_fu_224_p2;

assign tmp_17_fu_224_p2 = (tmp_13_cast_reg_239 + tmp_2_cast_cast_fu_220_p1);

assign tmp_1_fu_214_p2 = ((k_reg_120 == ap_const_lv6_0) ? 1'b1 : 1'b0);

assign tmp_2_cast_cast_fu_220_p1 = grp_fu_136_p2;

assign tmp_s_fu_148_p3 = {{i_reg_109}, {ap_const_lv5_0}};

always @ (posedge ap_clk) begin
    i_cast1_reg_234[31:4] <= 28'b0000000000000000000000000000;
    tmp_13_cast_reg_239[4:0] <= 5'b00000;
    tmp_13_cast_reg_239[9] <= 1'b0;
    dff_32D_addr_1_reg_250[4:0] <= 5'b00000;
end

endmodule //Stage_8_32D
