

================================================================
== Vivado HLS Report for 'MatrixMultiply'
================================================================
* Date:           Sun Aug 20 10:37:10 2017

* Version:        2017.1 (Build 1846317 on Fri Apr 14 19:19:38 MDT 2017)
* Project:        MatrixMultiply
* Solution:       solution1
* Product family: qzynq
* Target device:  xq7z100rf900-1i


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      7.81|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   31|   31|   32|   32|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |   30|   30|         6|          -|          -|     5|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 7
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond1)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	2  / true
* FSM state operations: 

 <State 1>: 1.77ns
ST_1: StgValue_8 (36)  [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_24), !map !7

ST_1: StgValue_9 (37)  [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_23), !map !13

ST_1: StgValue_10 (38)  [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_22), !map !19

ST_1: StgValue_11 (39)  [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_21), !map !25

ST_1: StgValue_12 (40)  [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_20), !map !31

ST_1: StgValue_13 (41)  [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_19), !map !37

ST_1: StgValue_14 (42)  [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_18), !map !43

ST_1: StgValue_15 (43)  [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_17), !map !49

ST_1: StgValue_16 (44)  [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_16), !map !55

ST_1: StgValue_17 (45)  [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_15), !map !61

ST_1: StgValue_18 (46)  [1/1] 0.00ns
:10  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_14), !map !67

ST_1: StgValue_19 (47)  [1/1] 0.00ns
:11  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_13), !map !73

ST_1: StgValue_20 (48)  [1/1] 0.00ns
:12  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_12), !map !79

ST_1: StgValue_21 (49)  [1/1] 0.00ns
:13  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_11), !map !85

ST_1: StgValue_22 (50)  [1/1] 0.00ns
:14  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_10), !map !91

ST_1: StgValue_23 (51)  [1/1] 0.00ns
:15  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_9), !map !97

ST_1: StgValue_24 (52)  [1/1] 0.00ns
:16  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_8), !map !103

ST_1: StgValue_25 (53)  [1/1] 0.00ns
:17  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_7), !map !109

ST_1: StgValue_26 (54)  [1/1] 0.00ns
:18  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_6), !map !115

ST_1: StgValue_27 (55)  [1/1] 0.00ns
:19  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_5), !map !121

ST_1: StgValue_28 (56)  [1/1] 0.00ns
:20  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_4), !map !127

ST_1: StgValue_29 (57)  [1/1] 0.00ns
:21  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_3), !map !133

ST_1: StgValue_30 (58)  [1/1] 0.00ns
:22  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_2), !map !139

ST_1: StgValue_31 (59)  [1/1] 0.00ns
:23  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_1), !map !145

ST_1: StgValue_32 (60)  [1/1] 0.00ns
:24  call void (...)* @_ssdm_op_SpecBitsMap(i32* %AA_0), !map !151

ST_1: StgValue_33 (61)  [1/1] 0.00ns
:25  call void (...)* @_ssdm_op_SpecBitsMap(i32* %bb_4), !map !157

ST_1: StgValue_34 (62)  [1/1] 0.00ns
:26  call void (...)* @_ssdm_op_SpecBitsMap(i32* %bb_3), !map !161

ST_1: StgValue_35 (63)  [1/1] 0.00ns
:27  call void (...)* @_ssdm_op_SpecBitsMap(i32* %bb_2), !map !165

ST_1: StgValue_36 (64)  [1/1] 0.00ns
:28  call void (...)* @_ssdm_op_SpecBitsMap(i32* %bb_1), !map !169

ST_1: StgValue_37 (65)  [1/1] 0.00ns
:29  call void (...)* @_ssdm_op_SpecBitsMap(i32* %bb_0), !map !173

ST_1: StgValue_38 (66)  [1/1] 0.00ns
:30  call void (...)* @_ssdm_op_SpecBitsMap(i32* %cc_4), !map !177

ST_1: StgValue_39 (67)  [1/1] 0.00ns
:31  call void (...)* @_ssdm_op_SpecBitsMap(i32* %cc_3), !map !181

ST_1: StgValue_40 (68)  [1/1] 0.00ns
:32  call void (...)* @_ssdm_op_SpecBitsMap(i32* %cc_2), !map !185

ST_1: StgValue_41 (69)  [1/1] 0.00ns
:33  call void (...)* @_ssdm_op_SpecBitsMap(i32* %cc_1), !map !189

ST_1: StgValue_42 (70)  [1/1] 0.00ns
:34  call void (...)* @_ssdm_op_SpecBitsMap(i32* %cc_0), !map !193

ST_1: StgValue_43 (71)  [1/1] 0.00ns
:35  call void (...)* @_ssdm_op_SpecTopModule([15 x i8]* @MatrixMultiply_str) nounwind

ST_1: StgValue_44 (72)  [1/1] 1.77ns  loc: MatrixMultiply.c:7
:36  br label %1


 <State 2>: 5.97ns
ST_2: i (74)  [1/1] 0.00ns
:0  %i = phi i3 [ 0, %0 ], [ %i_1, %.preheader.preheader5 ]

ST_2: exitcond1 (75)  [1/1] 2.07ns  loc: MatrixMultiply.c:7
:1  %exitcond1 = icmp eq i3 %i, -3

ST_2: empty (76)  [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 5, i64 5, i64 5) nounwind

ST_2: i_1 (77)  [1/1] 2.53ns  loc: MatrixMultiply.c:7
:3  %i_1 = add i3 %i, 1

ST_2: StgValue_49 (78)  [1/1] 0.00ns  loc: MatrixMultiply.c:7
:4  br i1 %exitcond1, label %2, label %.preheader.preheader_ifconv

ST_2: tmp_1 (80)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:0  %tmp_1 = zext i3 %i to i5

ST_2: tmp (81)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:1  %tmp = call i5 @_ssdm_op_BitConcatenate.i5.i3.i2(i3 %i, i2 0)

ST_2: tmp_t (82)  [1/1] 2.66ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:2  %tmp_t = add i5 %tmp_1, %tmp

ST_2: sel_tmp (88)  [1/1] 3.31ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:8  %sel_tmp = icmp eq i5 %tmp_t, 0

ST_2: sel_tmp2 (89)  [1/1] 3.31ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:9  %sel_tmp2 = icmp eq i5 %tmp_t, 5

ST_2: sel_tmp4 (90)  [1/1] 3.31ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:10  %sel_tmp4 = icmp eq i5 %tmp_t, 10

ST_2: sel_tmp6 (91)  [1/1] 3.31ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:11  %sel_tmp6 = icmp eq i5 %tmp_t, 15

ST_2: StgValue_57 (168)  [1/1] 0.00ns  loc: MatrixMultiply.c:16
:0  ret void


 <State 3>: 6.21ns
ST_3: AA_20_read (83)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:3  %AA_20_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_20)

ST_3: AA_0_read (84)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:4  %AA_0_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_0)

ST_3: AA_5_read (85)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:5  %AA_5_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_5)

ST_3: AA_10_read (86)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:6  %AA_10_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_10)

ST_3: AA_15_read (87)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:7  %AA_15_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_15)

ST_3: newSel (92)  [1/1] 0.00ns  loc: MatrixMultiply.c:12 (grouped into LUT with out node newSel2)
.preheader.preheader_ifconv:12  %newSel = select i1 %sel_tmp6, i32 %AA_15_read, i32 %AA_10_read

ST_3: or_cond (93)  [1/1] 2.07ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:13  %or_cond = or i1 %sel_tmp6, %sel_tmp4

ST_3: newSel1 (94)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:14  %newSel1 = select i1 %sel_tmp2, i32 %AA_5_read, i32 %AA_0_read

ST_3: or_cond1 (95)  [1/1] 0.00ns  loc: MatrixMultiply.c:12 (grouped into LUT with out node or_cond2)
.preheader.preheader_ifconv:15  %or_cond1 = or i1 %sel_tmp2, %sel_tmp

ST_3: newSel2 (96)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:16  %newSel2 = select i1 %or_cond, i32 %newSel, i32 %newSel1

ST_3: or_cond2 (97)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:17  %or_cond2 = or i1 %or_cond, %or_cond1

ST_3: newSel3 (98)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:18  %newSel3 = select i1 %or_cond2, i32 %newSel2, i32 %AA_20_read

ST_3: AA_21_read (101)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:21  %AA_21_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_21)

ST_3: AA_1_read (102)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:22  %AA_1_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_1)

ST_3: AA_6_read (103)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:23  %AA_6_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_6)

ST_3: AA_11_read (104)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:24  %AA_11_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_11)

ST_3: AA_16_read (105)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:25  %AA_16_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_16)

ST_3: newSel4 (106)  [1/1] 0.00ns  loc: MatrixMultiply.c:12 (grouped into LUT with out node newSel6)
.preheader.preheader_ifconv:26  %newSel4 = select i1 %sel_tmp6, i32 %AA_16_read, i32 %AA_11_read

ST_3: newSel5 (107)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:27  %newSel5 = select i1 %sel_tmp2, i32 %AA_6_read, i32 %AA_1_read

ST_3: newSel6 (108)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:28  %newSel6 = select i1 %or_cond, i32 %newSel4, i32 %newSel5

ST_3: newSel7 (109)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:29  %newSel7 = select i1 %or_cond2, i32 %newSel6, i32 %AA_21_read

ST_3: AA_22_read (112)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:32  %AA_22_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_22)

ST_3: AA_2_read (113)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:33  %AA_2_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_2)

ST_3: AA_7_read (114)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:34  %AA_7_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_7)

ST_3: AA_12_read (115)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:35  %AA_12_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_12)

ST_3: AA_17_read (116)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:36  %AA_17_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_17)

ST_3: newSel8 (117)  [1/1] 0.00ns  loc: MatrixMultiply.c:12 (grouped into LUT with out node newSel10)
.preheader.preheader_ifconv:37  %newSel8 = select i1 %sel_tmp6, i32 %AA_17_read, i32 %AA_12_read

ST_3: newSel9 (118)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:38  %newSel9 = select i1 %sel_tmp2, i32 %AA_7_read, i32 %AA_2_read

ST_3: newSel10 (119)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:39  %newSel10 = select i1 %or_cond, i32 %newSel8, i32 %newSel9

ST_3: newSel11 (120)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:40  %newSel11 = select i1 %or_cond2, i32 %newSel10, i32 %AA_22_read

ST_3: AA_23_read (123)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:43  %AA_23_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_23)

ST_3: AA_3_read (124)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:44  %AA_3_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_3)

ST_3: AA_8_read (125)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:45  %AA_8_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_8)

ST_3: AA_13_read (126)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:46  %AA_13_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_13)

ST_3: AA_18_read (127)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:47  %AA_18_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_18)

ST_3: newSel12 (128)  [1/1] 0.00ns  loc: MatrixMultiply.c:12 (grouped into LUT with out node newSel14)
.preheader.preheader_ifconv:48  %newSel12 = select i1 %sel_tmp6, i32 %AA_18_read, i32 %AA_13_read

ST_3: newSel13 (129)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:49  %newSel13 = select i1 %sel_tmp2, i32 %AA_8_read, i32 %AA_3_read

ST_3: newSel14 (130)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:50  %newSel14 = select i1 %or_cond, i32 %newSel12, i32 %newSel13

ST_3: newSel15 (131)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:51  %newSel15 = select i1 %or_cond2, i32 %newSel14, i32 %AA_23_read

ST_3: AA_24_read (134)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:54  %AA_24_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_24)

ST_3: AA_4_read (135)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:55  %AA_4_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_4)

ST_3: AA_9_read (136)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:56  %AA_9_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_9)

ST_3: AA_14_read (137)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:57  %AA_14_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_14)

ST_3: AA_19_read (138)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:58  %AA_19_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %AA_19)

ST_3: newSel16 (139)  [1/1] 0.00ns  loc: MatrixMultiply.c:12 (grouped into LUT with out node newSel18)
.preheader.preheader_ifconv:59  %newSel16 = select i1 %sel_tmp6, i32 %AA_19_read, i32 %AA_14_read

ST_3: newSel17 (140)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:60  %newSel17 = select i1 %sel_tmp2, i32 %AA_9_read, i32 %AA_4_read

ST_3: newSel18 (141)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:61  %newSel18 = select i1 %or_cond, i32 %newSel16, i32 %newSel17

ST_3: newSel19 (142)  [1/1] 2.07ns  loc: MatrixMultiply.c:12 (out node of the LUT)
.preheader.preheader_ifconv:62  %newSel19 = select i1 %or_cond2, i32 %newSel18, i32 %AA_24_read


 <State 4>: 5.75ns
ST_4: bb_0_read (99)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:19  %bb_0_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %bb_0)

ST_4: tmp_3 (100)  [3/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:20  %tmp_3 = mul nsw i32 %newSel3, %bb_0_read

ST_4: bb_1_read (110)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:30  %bb_1_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %bb_1)

ST_4: tmp_3_1 (111)  [3/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:31  %tmp_3_1 = mul nsw i32 %newSel7, %bb_1_read

ST_4: bb_2_read (121)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:41  %bb_2_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %bb_2)

ST_4: tmp_3_2 (122)  [3/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:42  %tmp_3_2 = mul nsw i32 %newSel11, %bb_2_read

ST_4: bb_3_read (132)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:52  %bb_3_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %bb_3)

ST_4: tmp_3_3 (133)  [3/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:53  %tmp_3_3 = mul nsw i32 %newSel15, %bb_3_read

ST_4: bb_4_read (143)  [1/1] 0.00ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:63  %bb_4_read = call i32 @_ssdm_op_Read.ap_auto.i32P(i32* %bb_4)

ST_4: tmp_3_4 (144)  [3/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:64  %tmp_3_4 = mul nsw i32 %newSel19, %bb_4_read


 <State 5>: 5.75ns
ST_5: tmp_3 (100)  [2/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:20  %tmp_3 = mul nsw i32 %newSel3, %bb_0_read

ST_5: tmp_3_1 (111)  [2/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:31  %tmp_3_1 = mul nsw i32 %newSel7, %bb_1_read

ST_5: tmp_3_2 (122)  [2/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:42  %tmp_3_2 = mul nsw i32 %newSel11, %bb_2_read

ST_5: tmp_3_3 (133)  [2/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:53  %tmp_3_3 = mul nsw i32 %newSel15, %bb_3_read

ST_5: tmp_3_4 (144)  [2/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:64  %tmp_3_4 = mul nsw i32 %newSel19, %bb_4_read


 <State 6>: 5.75ns
ST_6: tmp_3 (100)  [1/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:20  %tmp_3 = mul nsw i32 %newSel3, %bb_0_read

ST_6: tmp_3_1 (111)  [1/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:31  %tmp_3_1 = mul nsw i32 %newSel7, %bb_1_read

ST_6: tmp_3_2 (122)  [1/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:42  %tmp_3_2 = mul nsw i32 %newSel11, %bb_2_read

ST_6: tmp_3_3 (133)  [1/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:53  %tmp_3_3 = mul nsw i32 %newSel15, %bb_3_read

ST_6: tmp_3_4 (144)  [1/3] 5.75ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:64  %tmp_3_4 = mul nsw i32 %newSel19, %bb_4_read


 <State 7>: 7.81ns
ST_7: tmp1 (145)  [1/1] 3.44ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:65  %tmp1 = add i32 %tmp_3_3, %tmp_3_2

ST_7: tmp2 (146)  [1/1] 3.44ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:66  %tmp2 = add i32 %tmp_3_4, %tmp_3_1

ST_7: tmp3 (147)  [1/1] 2.19ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:67  %tmp3 = add i32 %tmp_3, %tmp2

ST_7: sum_1_4 (148)  [1/1] 2.19ns  loc: MatrixMultiply.c:12
.preheader.preheader_ifconv:68  %sum_1_4 = add nsw i32 %tmp1, %tmp3

ST_7: StgValue_130 (149)  [1/1] 3.10ns  loc: MatrixMultiply.c:14
.preheader.preheader_ifconv:69  switch i3 %i, label %branch4 [
    i3 0, label %branch0
    i3 1, label %branch1
    i3 2, label %branch2
    i3 3, label %branch3
  ]

ST_7: StgValue_131 (151)  [1/1] 0.00ns  loc: MatrixMultiply.c:14
branch3:0  call void @_ssdm_op_Write.ap_auto.i32P(i32* %cc_3, i32 %sum_1_4)

ST_7: StgValue_132 (152)  [1/1] 0.00ns  loc: MatrixMultiply.c:14
branch3:1  br label %.preheader.preheader5

ST_7: StgValue_133 (154)  [1/1] 0.00ns  loc: MatrixMultiply.c:14
branch2:0  call void @_ssdm_op_Write.ap_auto.i32P(i32* %cc_2, i32 %sum_1_4)

ST_7: StgValue_134 (155)  [1/1] 0.00ns  loc: MatrixMultiply.c:14
branch2:1  br label %.preheader.preheader5

ST_7: StgValue_135 (157)  [1/1] 0.00ns  loc: MatrixMultiply.c:14
branch1:0  call void @_ssdm_op_Write.ap_auto.i32P(i32* %cc_1, i32 %sum_1_4)

ST_7: StgValue_136 (158)  [1/1] 0.00ns  loc: MatrixMultiply.c:14
branch1:1  br label %.preheader.preheader5

ST_7: StgValue_137 (160)  [1/1] 0.00ns  loc: MatrixMultiply.c:14
branch0:0  call void @_ssdm_op_Write.ap_auto.i32P(i32* %cc_0, i32 %sum_1_4)

ST_7: StgValue_138 (161)  [1/1] 0.00ns  loc: MatrixMultiply.c:14
branch0:1  br label %.preheader.preheader5

ST_7: StgValue_139 (163)  [1/1] 0.00ns  loc: MatrixMultiply.c:14
branch4:0  call void @_ssdm_op_Write.ap_auto.i32P(i32* %cc_4, i32 %sum_1_4)

ST_7: StgValue_140 (164)  [1/1] 0.00ns  loc: MatrixMultiply.c:14
branch4:1  br label %.preheader.preheader5

ST_7: StgValue_141 (166)  [1/1] 0.00ns  loc: MatrixMultiply.c:7
.preheader.preheader5:0  br label %1



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', MatrixMultiply.c:7) [74]  (1.77 ns)

 <State 2>: 5.97ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', MatrixMultiply.c:7) [74]  (0 ns)
	'add' operation ('tmp_t', MatrixMultiply.c:12) [82]  (2.66 ns)
	'icmp' operation ('sel_tmp', MatrixMultiply.c:12) [88]  (3.31 ns)

 <State 3>: 6.21ns
The critical path consists of the following:
	wire read on port 'AA_0' (MatrixMultiply.c:12) [84]  (0 ns)
	'select' operation ('newSel1', MatrixMultiply.c:12) [94]  (2.07 ns)
	'select' operation ('newSel2', MatrixMultiply.c:12) [96]  (2.07 ns)
	'select' operation ('newSel3', MatrixMultiply.c:12) [98]  (2.07 ns)

 <State 4>: 5.75ns
The critical path consists of the following:
	wire read on port 'bb_0' (MatrixMultiply.c:12) [99]  (0 ns)
	'mul' operation ('tmp_3', MatrixMultiply.c:12) [100]  (5.75 ns)

 <State 5>: 5.75ns
The critical path consists of the following:
	'mul' operation ('tmp_3', MatrixMultiply.c:12) [100]  (5.75 ns)

 <State 6>: 5.75ns
The critical path consists of the following:
	'mul' operation ('tmp_3', MatrixMultiply.c:12) [100]  (5.75 ns)

 <State 7>: 7.81ns
The critical path consists of the following:
	'add' operation ('tmp2', MatrixMultiply.c:12) [146]  (3.44 ns)
	'add' operation ('tmp3', MatrixMultiply.c:12) [147]  (2.19 ns)
	'add' operation ('sum_1_4', MatrixMultiply.c:12) [148]  (2.19 ns)
	wire write on port 'cc_1' (MatrixMultiply.c:14) [157]  (0 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
