// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MatrixMultiply,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xq7z100rf900-1i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.807500,HLS_SYN_LAT=31,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=1167,HLS_SYN_LUT=1119}" *)

module MatrixMultiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        AA_0,
        AA_1,
        AA_2,
        AA_3,
        AA_4,
        AA_5,
        AA_6,
        AA_7,
        AA_8,
        AA_9,
        AA_10,
        AA_11,
        AA_12,
        AA_13,
        AA_14,
        AA_15,
        AA_16,
        AA_17,
        AA_18,
        AA_19,
        AA_20,
        AA_21,
        AA_22,
        AA_23,
        AA_24,
        bb_0,
        bb_1,
        bb_2,
        bb_3,
        bb_4,
        cc_0,
        cc_0_ap_vld,
        cc_1,
        cc_1_ap_vld,
        cc_2,
        cc_2_ap_vld,
        cc_3,
        cc_3_ap_vld,
        cc_4,
        cc_4_ap_vld
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] AA_0;
input  [31:0] AA_1;
input  [31:0] AA_2;
input  [31:0] AA_3;
input  [31:0] AA_4;
input  [31:0] AA_5;
input  [31:0] AA_6;
input  [31:0] AA_7;
input  [31:0] AA_8;
input  [31:0] AA_9;
input  [31:0] AA_10;
input  [31:0] AA_11;
input  [31:0] AA_12;
input  [31:0] AA_13;
input  [31:0] AA_14;
input  [31:0] AA_15;
input  [31:0] AA_16;
input  [31:0] AA_17;
input  [31:0] AA_18;
input  [31:0] AA_19;
input  [31:0] AA_20;
input  [31:0] AA_21;
input  [31:0] AA_22;
input  [31:0] AA_23;
input  [31:0] AA_24;
input  [31:0] bb_0;
input  [31:0] bb_1;
input  [31:0] bb_2;
input  [31:0] bb_3;
input  [31:0] bb_4;
output  [31:0] cc_0;
output   cc_0_ap_vld;
output  [31:0] cc_1;
output   cc_1_ap_vld;
output  [31:0] cc_2;
output   cc_2_ap_vld;
output  [31:0] cc_3;
output   cc_3_ap_vld;
output  [31:0] cc_4;
output   cc_4_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cc_0_ap_vld;
reg cc_1_ap_vld;
reg cc_2_ap_vld;
reg cc_3_ap_vld;
reg cc_4_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_1_fu_339_p2;
reg   [2:0] i_1_reg_603;
wire    ap_CS_fsm_state2;
wire   [0:0] sel_tmp_fu_363_p2;
reg   [0:0] sel_tmp_reg_608;
wire   [0:0] exitcond1_fu_333_p2;
wire   [0:0] sel_tmp2_fu_369_p2;
reg   [0:0] sel_tmp2_reg_613;
wire   [0:0] sel_tmp4_fu_375_p2;
reg   [0:0] sel_tmp4_reg_623;
wire   [0:0] sel_tmp6_fu_381_p2;
reg   [0:0] sel_tmp6_reg_628;
wire  signed [31:0] newSel3_fu_423_p3;
reg  signed [31:0] newSel3_reg_638;
wire    ap_CS_fsm_state3;
wire  signed [31:0] newSel7_fu_453_p3;
reg  signed [31:0] newSel7_reg_643;
wire  signed [31:0] newSel11_fu_483_p3;
reg  signed [31:0] newSel11_reg_648;
wire  signed [31:0] newSel15_fu_513_p3;
reg  signed [31:0] newSel15_reg_653;
wire  signed [31:0] newSel19_fu_543_p3;
reg  signed [31:0] newSel19_reg_658;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_551_p2;
reg   [31:0] tmp_3_reg_688;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_556_p2;
reg   [31:0] tmp_3_1_reg_693;
wire   [31:0] grp_fu_561_p2;
reg   [31:0] tmp_3_2_reg_698;
wire   [31:0] grp_fu_566_p2;
reg   [31:0] tmp_3_3_reg_703;
wire   [31:0] grp_fu_571_p2;
reg   [31:0] tmp_3_4_reg_708;
reg   [2:0] i_reg_321;
wire    ap_CS_fsm_state7;
wire   [31:0] sum_1_4_fu_589_p2;
wire   [4:0] tmp_1_fu_345_p1;
wire   [4:0] tmp_fu_349_p3;
wire   [4:0] tmp_t_fu_357_p2;
wire   [0:0] or_cond_fu_394_p2;
wire   [31:0] newSel_fu_387_p3;
wire   [31:0] newSel1_fu_398_p3;
wire   [0:0] or_cond1_fu_405_p2;
wire   [0:0] or_cond2_fu_417_p2;
wire   [31:0] newSel2_fu_409_p3;
wire   [31:0] newSel4_fu_431_p3;
wire   [31:0] newSel5_fu_438_p3;
wire   [31:0] newSel6_fu_445_p3;
wire   [31:0] newSel8_fu_461_p3;
wire   [31:0] newSel9_fu_468_p3;
wire   [31:0] newSel10_fu_475_p3;
wire   [31:0] newSel12_fu_491_p3;
wire   [31:0] newSel13_fu_498_p3;
wire   [31:0] newSel14_fu_505_p3;
wire   [31:0] newSel16_fu_521_p3;
wire   [31:0] newSel17_fu_528_p3;
wire   [31:0] newSel18_fu_535_p3;
wire   [31:0] tmp2_fu_580_p2;
wire   [31:0] tmp1_fu_576_p2;
wire   [31:0] tmp3_fu_584_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

MatrixMultiply_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MatrixMultiply_mubkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(newSel3_reg_638),
    .din1(bb_0),
    .ce(1'b1),
    .dout(grp_fu_551_p2)
);

MatrixMultiply_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MatrixMultiply_mubkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(newSel7_reg_643),
    .din1(bb_1),
    .ce(1'b1),
    .dout(grp_fu_556_p2)
);

MatrixMultiply_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MatrixMultiply_mubkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(newSel11_reg_648),
    .din1(bb_2),
    .ce(1'b1),
    .dout(grp_fu_561_p2)
);

MatrixMultiply_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MatrixMultiply_mubkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(newSel15_reg_653),
    .din1(bb_3),
    .ce(1'b1),
    .dout(grp_fu_566_p2)
);

MatrixMultiply_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MatrixMultiply_mubkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(newSel19_reg_658),
    .din1(bb_4),
    .ce(1'b1),
    .dout(grp_fu_571_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_321 <= i_1_reg_603;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_321 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_603 <= i_1_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        newSel11_reg_648 <= newSel11_fu_483_p3;
        newSel15_reg_653 <= newSel15_fu_513_p3;
        newSel19_reg_658 <= newSel19_fu_543_p3;
        newSel3_reg_638 <= newSel3_fu_423_p3;
        newSel7_reg_643 <= newSel7_fu_453_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_333_p2 == 1'd0))) begin
        sel_tmp2_reg_613 <= sel_tmp2_fu_369_p2;
        sel_tmp4_reg_623 <= sel_tmp4_fu_375_p2;
        sel_tmp6_reg_628 <= sel_tmp6_fu_381_p2;
        sel_tmp_reg_608 <= sel_tmp_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_3_1_reg_693 <= grp_fu_556_p2;
        tmp_3_2_reg_698 <= grp_fu_561_p2;
        tmp_3_3_reg_703 <= grp_fu_566_p2;
        tmp_3_4_reg_708 <= grp_fu_571_p2;
        tmp_3_reg_688 <= grp_fu_551_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_333_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_333_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (3'd0 == i_reg_321))) begin
        cc_0_ap_vld = 1'b1;
    end else begin
        cc_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (i_reg_321 == 3'd1))) begin
        cc_1_ap_vld = 1'b1;
    end else begin
        cc_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (i_reg_321 == 3'd2))) begin
        cc_2_ap_vld = 1'b1;
    end else begin
        cc_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (i_reg_321 == 3'd3))) begin
        cc_3_ap_vld = 1'b1;
    end else begin
        cc_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(3'd0 == i_reg_321) & ~(i_reg_321 == 3'd1) & ~(i_reg_321 == 3'd2) & ~(i_reg_321 == 3'd3))) begin
        cc_4_ap_vld = 1'b1;
    end else begin
        cc_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign cc_0 = sum_1_4_fu_589_p2;

assign cc_1 = sum_1_4_fu_589_p2;

assign cc_2 = sum_1_4_fu_589_p2;

assign cc_3 = sum_1_4_fu_589_p2;

assign cc_4 = sum_1_4_fu_589_p2;

assign exitcond1_fu_333_p2 = ((i_reg_321 == 3'd5) ? 1'b1 : 1'b0);

assign i_1_fu_339_p2 = (i_reg_321 + 3'd1);

assign newSel10_fu_475_p3 = ((or_cond_fu_394_p2[0:0] === 1'b1) ? newSel8_fu_461_p3 : newSel9_fu_468_p3);

assign newSel11_fu_483_p3 = ((or_cond2_fu_417_p2[0:0] === 1'b1) ? newSel10_fu_475_p3 : AA_22);

assign newSel12_fu_491_p3 = ((sel_tmp6_reg_628[0:0] === 1'b1) ? AA_18 : AA_13);

assign newSel13_fu_498_p3 = ((sel_tmp2_reg_613[0:0] === 1'b1) ? AA_8 : AA_3);

assign newSel14_fu_505_p3 = ((or_cond_fu_394_p2[0:0] === 1'b1) ? newSel12_fu_491_p3 : newSel13_fu_498_p3);

assign newSel15_fu_513_p3 = ((or_cond2_fu_417_p2[0:0] === 1'b1) ? newSel14_fu_505_p3 : AA_23);

assign newSel16_fu_521_p3 = ((sel_tmp6_reg_628[0:0] === 1'b1) ? AA_19 : AA_14);

assign newSel17_fu_528_p3 = ((sel_tmp2_reg_613[0:0] === 1'b1) ? AA_9 : AA_4);

assign newSel18_fu_535_p3 = ((or_cond_fu_394_p2[0:0] === 1'b1) ? newSel16_fu_521_p3 : newSel17_fu_528_p3);

assign newSel19_fu_543_p3 = ((or_cond2_fu_417_p2[0:0] === 1'b1) ? newSel18_fu_535_p3 : AA_24);

assign newSel1_fu_398_p3 = ((sel_tmp2_reg_613[0:0] === 1'b1) ? AA_5 : AA_0);

assign newSel2_fu_409_p3 = ((or_cond_fu_394_p2[0:0] === 1'b1) ? newSel_fu_387_p3 : newSel1_fu_398_p3);

assign newSel3_fu_423_p3 = ((or_cond2_fu_417_p2[0:0] === 1'b1) ? newSel2_fu_409_p3 : AA_20);

assign newSel4_fu_431_p3 = ((sel_tmp6_reg_628[0:0] === 1'b1) ? AA_16 : AA_11);

assign newSel5_fu_438_p3 = ((sel_tmp2_reg_613[0:0] === 1'b1) ? AA_6 : AA_1);

assign newSel6_fu_445_p3 = ((or_cond_fu_394_p2[0:0] === 1'b1) ? newSel4_fu_431_p3 : newSel5_fu_438_p3);

assign newSel7_fu_453_p3 = ((or_cond2_fu_417_p2[0:0] === 1'b1) ? newSel6_fu_445_p3 : AA_21);

assign newSel8_fu_461_p3 = ((sel_tmp6_reg_628[0:0] === 1'b1) ? AA_17 : AA_12);

assign newSel9_fu_468_p3 = ((sel_tmp2_reg_613[0:0] === 1'b1) ? AA_7 : AA_2);

assign newSel_fu_387_p3 = ((sel_tmp6_reg_628[0:0] === 1'b1) ? AA_15 : AA_10);

assign or_cond1_fu_405_p2 = (sel_tmp2_reg_613 | sel_tmp_reg_608);

assign or_cond2_fu_417_p2 = (or_cond_fu_394_p2 | or_cond1_fu_405_p2);

assign or_cond_fu_394_p2 = (sel_tmp6_reg_628 | sel_tmp4_reg_623);

assign sel_tmp2_fu_369_p2 = ((tmp_t_fu_357_p2 == 5'd5) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_375_p2 = ((tmp_t_fu_357_p2 == 5'd10) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_381_p2 = ((tmp_t_fu_357_p2 == 5'd15) ? 1'b1 : 1'b0);

assign sel_tmp_fu_363_p2 = ((tmp_t_fu_357_p2 == 5'd0) ? 1'b1 : 1'b0);

assign sum_1_4_fu_589_p2 = (tmp1_fu_576_p2 + tmp3_fu_584_p2);

assign tmp1_fu_576_p2 = (tmp_3_3_reg_703 + tmp_3_2_reg_698);

assign tmp2_fu_580_p2 = (tmp_3_4_reg_708 + tmp_3_1_reg_693);

assign tmp3_fu_584_p2 = (tmp_3_reg_688 + tmp2_fu_580_p2);

assign tmp_1_fu_345_p1 = i_reg_321;

assign tmp_fu_349_p3 = {{i_reg_321}, {2'd0}};

assign tmp_t_fu_357_p2 = (tmp_1_fu_345_p1 + tmp_fu_349_p3);

endmodule //MatrixMultiply
