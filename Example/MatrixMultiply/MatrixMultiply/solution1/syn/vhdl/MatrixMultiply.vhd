-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AA_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_16 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_17 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_18 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_19 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_20 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_21 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_22 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_23 : IN STD_LOGIC_VECTOR (31 downto 0);
    AA_24 : IN STD_LOGIC_VECTOR (31 downto 0);
    bb_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bb_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bb_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    bb_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    bb_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    cc_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cc_0_ap_vld : OUT STD_LOGIC;
    cc_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cc_1_ap_vld : OUT STD_LOGIC;
    cc_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cc_2_ap_vld : OUT STD_LOGIC;
    cc_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cc_3_ap_vld : OUT STD_LOGIC;
    cc_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cc_4_ap_vld : OUT STD_LOGIC );
end;


architecture behav of MatrixMultiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MatrixMultiply,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xq7z100rf900-1i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.807500,HLS_SYN_LAT=31,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=1167,HLS_SYN_LUT=1119}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_339_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_603 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sel_tmp_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel3_fu_423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel3_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal newSel7_fu_453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel7_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel11_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel11_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel15_fu_513_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel15_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel19_fu_543_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel19_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_551_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_4_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_321 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sum_1_4_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_345_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_349_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_t_fu_357_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_cond_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_387_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_398_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond1_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel4_fu_431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel5_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel6_fu_445_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel8_fu_461_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel9_fu_468_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel10_fu_475_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel12_fu_491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel13_fu_498_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel14_fu_505_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel16_fu_521_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel17_fu_528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel18_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component MatrixMultiply_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    MatrixMultiply_mubkb_U0 : component MatrixMultiply_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => newSel3_reg_638,
        din1 => bb_0,
        ce => ap_const_logic_1,
        dout => grp_fu_551_p2);

    MatrixMultiply_mubkb_U1 : component MatrixMultiply_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => newSel7_reg_643,
        din1 => bb_1,
        ce => ap_const_logic_1,
        dout => grp_fu_556_p2);

    MatrixMultiply_mubkb_U2 : component MatrixMultiply_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => newSel11_reg_648,
        din1 => bb_2,
        ce => ap_const_logic_1,
        dout => grp_fu_561_p2);

    MatrixMultiply_mubkb_U3 : component MatrixMultiply_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => newSel15_reg_653,
        din1 => bb_3,
        ce => ap_const_logic_1,
        dout => grp_fu_566_p2);

    MatrixMultiply_mubkb_U4 : component MatrixMultiply_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => newSel19_reg_658,
        din1 => bb_4,
        ce => ap_const_logic_1,
        dout => grp_fu_571_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_321 <= i_1_reg_603;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_321 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_603 <= i_1_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                newSel11_reg_648 <= newSel11_fu_483_p3;
                newSel15_reg_653 <= newSel15_fu_513_p3;
                newSel19_reg_658 <= newSel19_fu_543_p3;
                newSel3_reg_638 <= newSel3_fu_423_p3;
                newSel7_reg_643 <= newSel7_fu_453_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_333_p2 = ap_const_lv1_0))) then
                sel_tmp2_reg_613 <= sel_tmp2_fu_369_p2;
                sel_tmp4_reg_623 <= sel_tmp4_fu_375_p2;
                sel_tmp6_reg_628 <= sel_tmp6_fu_381_p2;
                sel_tmp_reg_608 <= sel_tmp_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_3_1_reg_693 <= grp_fu_556_p2;
                tmp_3_2_reg_698 <= grp_fu_561_p2;
                tmp_3_3_reg_703 <= grp_fu_566_p2;
                tmp_3_4_reg_708 <= grp_fu_571_p2;
                tmp_3_reg_688 <= grp_fu_551_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_333_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_333_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_333_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_333_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_333_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cc_0 <= sum_1_4_fu_589_p2;

    cc_0_ap_vld_assign_proc : process(i_reg_321, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv3_0 = i_reg_321))) then 
            cc_0_ap_vld <= ap_const_logic_1;
        else 
            cc_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cc_1 <= sum_1_4_fu_589_p2;

    cc_1_ap_vld_assign_proc : process(i_reg_321, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (i_reg_321 = ap_const_lv3_1))) then 
            cc_1_ap_vld <= ap_const_logic_1;
        else 
            cc_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cc_2 <= sum_1_4_fu_589_p2;

    cc_2_ap_vld_assign_proc : process(i_reg_321, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (i_reg_321 = ap_const_lv3_2))) then 
            cc_2_ap_vld <= ap_const_logic_1;
        else 
            cc_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cc_3 <= sum_1_4_fu_589_p2;

    cc_3_ap_vld_assign_proc : process(i_reg_321, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (i_reg_321 = ap_const_lv3_3))) then 
            cc_3_ap_vld <= ap_const_logic_1;
        else 
            cc_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cc_4 <= sum_1_4_fu_589_p2;

    cc_4_ap_vld_assign_proc : process(i_reg_321, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and not((ap_const_lv3_0 = i_reg_321)) and not((i_reg_321 = ap_const_lv3_1)) and not((i_reg_321 = ap_const_lv3_2)) and not((i_reg_321 = ap_const_lv3_3)))) then 
            cc_4_ap_vld <= ap_const_logic_1;
        else 
            cc_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_333_p2 <= "1" when (i_reg_321 = ap_const_lv3_5) else "0";
    i_1_fu_339_p2 <= std_logic_vector(unsigned(i_reg_321) + unsigned(ap_const_lv3_1));
    newSel10_fu_475_p3 <= 
        newSel8_fu_461_p3 when (or_cond_fu_394_p2(0) = '1') else 
        newSel9_fu_468_p3;
    newSel11_fu_483_p3 <= 
        newSel10_fu_475_p3 when (or_cond2_fu_417_p2(0) = '1') else 
        AA_22;
    newSel12_fu_491_p3 <= 
        AA_18 when (sel_tmp6_reg_628(0) = '1') else 
        AA_13;
    newSel13_fu_498_p3 <= 
        AA_8 when (sel_tmp2_reg_613(0) = '1') else 
        AA_3;
    newSel14_fu_505_p3 <= 
        newSel12_fu_491_p3 when (or_cond_fu_394_p2(0) = '1') else 
        newSel13_fu_498_p3;
    newSel15_fu_513_p3 <= 
        newSel14_fu_505_p3 when (or_cond2_fu_417_p2(0) = '1') else 
        AA_23;
    newSel16_fu_521_p3 <= 
        AA_19 when (sel_tmp6_reg_628(0) = '1') else 
        AA_14;
    newSel17_fu_528_p3 <= 
        AA_9 when (sel_tmp2_reg_613(0) = '1') else 
        AA_4;
    newSel18_fu_535_p3 <= 
        newSel16_fu_521_p3 when (or_cond_fu_394_p2(0) = '1') else 
        newSel17_fu_528_p3;
    newSel19_fu_543_p3 <= 
        newSel18_fu_535_p3 when (or_cond2_fu_417_p2(0) = '1') else 
        AA_24;
    newSel1_fu_398_p3 <= 
        AA_5 when (sel_tmp2_reg_613(0) = '1') else 
        AA_0;
    newSel2_fu_409_p3 <= 
        newSel_fu_387_p3 when (or_cond_fu_394_p2(0) = '1') else 
        newSel1_fu_398_p3;
    newSel3_fu_423_p3 <= 
        newSel2_fu_409_p3 when (or_cond2_fu_417_p2(0) = '1') else 
        AA_20;
    newSel4_fu_431_p3 <= 
        AA_16 when (sel_tmp6_reg_628(0) = '1') else 
        AA_11;
    newSel5_fu_438_p3 <= 
        AA_6 when (sel_tmp2_reg_613(0) = '1') else 
        AA_1;
    newSel6_fu_445_p3 <= 
        newSel4_fu_431_p3 when (or_cond_fu_394_p2(0) = '1') else 
        newSel5_fu_438_p3;
    newSel7_fu_453_p3 <= 
        newSel6_fu_445_p3 when (or_cond2_fu_417_p2(0) = '1') else 
        AA_21;
    newSel8_fu_461_p3 <= 
        AA_17 when (sel_tmp6_reg_628(0) = '1') else 
        AA_12;
    newSel9_fu_468_p3 <= 
        AA_7 when (sel_tmp2_reg_613(0) = '1') else 
        AA_2;
    newSel_fu_387_p3 <= 
        AA_15 when (sel_tmp6_reg_628(0) = '1') else 
        AA_10;
    or_cond1_fu_405_p2 <= (sel_tmp2_reg_613 or sel_tmp_reg_608);
    or_cond2_fu_417_p2 <= (or_cond_fu_394_p2 or or_cond1_fu_405_p2);
    or_cond_fu_394_p2 <= (sel_tmp6_reg_628 or sel_tmp4_reg_623);
    sel_tmp2_fu_369_p2 <= "1" when (tmp_t_fu_357_p2 = ap_const_lv5_5) else "0";
    sel_tmp4_fu_375_p2 <= "1" when (tmp_t_fu_357_p2 = ap_const_lv5_A) else "0";
    sel_tmp6_fu_381_p2 <= "1" when (tmp_t_fu_357_p2 = ap_const_lv5_F) else "0";
    sel_tmp_fu_363_p2 <= "1" when (tmp_t_fu_357_p2 = ap_const_lv5_0) else "0";
    sum_1_4_fu_589_p2 <= std_logic_vector(unsigned(tmp1_fu_576_p2) + unsigned(tmp3_fu_584_p2));
    tmp1_fu_576_p2 <= std_logic_vector(unsigned(tmp_3_3_reg_703) + unsigned(tmp_3_2_reg_698));
    tmp2_fu_580_p2 <= std_logic_vector(unsigned(tmp_3_4_reg_708) + unsigned(tmp_3_1_reg_693));
    tmp3_fu_584_p2 <= std_logic_vector(unsigned(tmp_3_reg_688) + unsigned(tmp2_fu_580_p2));
    tmp_1_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_321),5));
    tmp_fu_349_p3 <= (i_reg_321 & ap_const_lv2_0);
    tmp_t_fu_357_p2 <= std_logic_vector(unsigned(tmp_1_fu_345_p1) + unsigned(tmp_fu_349_p3));
end behav;
