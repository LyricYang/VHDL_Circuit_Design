-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AA_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    AA_ce0 : OUT STD_LOGIC;
    AA_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bb_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bb_ce0 : OUT STD_LOGIC;
    bb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cc_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cc_ce0 : OUT STD_LOGIC;
    cc_we0 : OUT STD_LOGIC;
    cc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MatrixMultiply is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MatrixMultiply,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xq7z100rf900-1i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.067000,HLS_SYN_LAT=136,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=258,HLS_SYN_LUT=210}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_cast4_fu_99_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast4_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_cast_fu_103_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_reg_183 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_113_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_191 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_fu_119_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_reg_196 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_142_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_204 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sum_1_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_reg_64 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_75 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_reg_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_cast_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast2_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_132_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_148_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_cast_fu_153_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum1_fu_157_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component MatrixMultiply_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    MatrixMultiply_mubkb_U0 : component MatrixMultiply_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bb_q0,
        din1 => AA_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_136_p2 = ap_const_lv1_1))) then 
                i_reg_64 <= i_1_reg_191;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_64 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_107_p2 = ap_const_lv1_0))) then 
                j_reg_75 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_75 <= j_1_reg_204;
            end if; 
        end if;
    end process;

    sum_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_107_p2 = ap_const_lv1_0))) then 
                sum_reg_86 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sum_reg_86 <= sum_1_fu_173_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_191 <= i_1_fu_113_p2;
                    i_cast4_reg_178(2 downto 0) <= i_cast4_fu_99_p1(2 downto 0);
                    i_cast_reg_183(2 downto 0) <= i_cast_fu_103_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_204 <= j_1_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_107_p2 = ap_const_lv1_0))) then
                    p_shl_reg_196(4 downto 2) <= p_shl_fu_119_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_3_reg_229 <= grp_fu_167_p2;
            end if;
        end if;
    end process;
    i_cast4_reg_178(31 downto 3) <= "00000000000000000000000000000";
    i_cast_reg_183(3) <= '0';
    p_shl_reg_196(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_107_p2, ap_CS_fsm_state3, exitcond_fu_136_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_107_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_136_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    AA_address0 <= sum1_cast_fu_162_p1(5 - 1 downto 0);

    AA_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            AA_ce0 <= ap_const_logic_1;
        else 
            AA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_107_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_107_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_107_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_107_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bb_address0 <= j_cast2_fu_127_p1(3 - 1 downto 0);

    bb_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bb_ce0 <= ap_const_logic_1;
        else 
            bb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cc_address0 <= i_cast4_reg_178(3 - 1 downto 0);

    cc_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cc_ce0 <= ap_const_logic_1;
        else 
            cc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cc_d0 <= sum_reg_86;

    cc_we0_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_136_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_136_p2 = ap_const_lv1_1))) then 
            cc_we0 <= ap_const_logic_1;
        else 
            cc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_107_p2 <= "1" when (i_reg_64 = ap_const_lv3_5) else "0";
    exitcond_fu_136_p2 <= "1" when (j_reg_75 = ap_const_lv3_5) else "0";
    i_1_fu_113_p2 <= std_logic_vector(unsigned(i_reg_64) + unsigned(ap_const_lv3_1));
    i_cast4_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_64),32));
    i_cast_fu_103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_64),4));
    j_1_fu_142_p2 <= std_logic_vector(unsigned(j_reg_75) + unsigned(ap_const_lv3_1));
    j_cast2_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_75),32));
    j_cast_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_75),4));
    p_shl_fu_119_p3 <= (i_reg_64 & ap_const_lv2_0);
    sum1_cast_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_157_p2),32));
    sum1_fu_157_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_153_p1) + unsigned(p_shl_reg_196));
    sum_1_fu_173_p2 <= std_logic_vector(unsigned(tmp_3_reg_229) + unsigned(sum_reg_86));
    tmp1_cast_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_148_p2),5));
    tmp1_fu_148_p2 <= std_logic_vector(unsigned(i_cast_reg_183) + unsigned(j_cast_fu_132_p1));
end behav;
